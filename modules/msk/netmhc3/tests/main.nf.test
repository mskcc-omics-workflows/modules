nextflow_process {

    name "Test Process NETMHC3"
    script "../main.nf"
    process "NETMHC3"

    tag "modules"
    tag "modules_nfcore"
    tag "netmhc3"
    tag "modules_msk"

    test("netmhc3 - MUT,SV - xls,output,fa") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(file(params.test_data_mskcc['neoantigen']['MUT_sequence_fa']), checkIfExists: true),
                    file(file(params.test_data_mskcc['neoantigen']['svfa']), checkIfExists: true),
                    "HLA-A24:02,HLA-A24:02,HLA-B39:01,HLA-B39:01,HLA-C07:01,HLA-C06:02",
                    "MUT"
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.netmhcoutput[0][0],
                    file(process.out.xls[0][1]).name,
                    file(process.out.netmhcoutput[0][1]).name
                    ).match()
                }
            )
        }

    }

    test("netmhc3 - WT,SV - xls,output,fa") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(file(params.test_data_mskcc['neoantigen']['WT_sequence_fa']), checkIfExists: true),
                    file(file(params.test_data_mskcc['neoantigen']['wtsvfa']), checkIfExists: true),
                    "HLA-A24:02,HLA-A24:02,HLA-B39:01,HLA-B39:01,HLA-C07:01,HLA-C06:02",
                    "WT"
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.netmhcoutput[0][0],
                    file(process.out.xls[0][1]).name,
                    file(process.out.netmhcoutput[0][1]).name
                    ).match()
                }
            )
        }

    }

    test("netmhc3 - MUT - xls,output,fa") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(file(params.test_data_mskcc['neoantigen']['MUT_sequence_fa']), checkIfExists: true),
                    [],
                    "HLA-A24:02,HLA-A24:02,HLA-B39:01,HLA-B39:01,HLA-C07:01,HLA-C06:02",
                    "MUT"
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.netmhcoutput[0][0],
                    file(process.out.xls[0][1]).name,
                    file(process.out.netmhcoutput[0][1]).name
                    ).match()
                }
            )
        }

    }

    test("netmhc3 - WT - xls,output,fa") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(file(params.test_data_mskcc['neoantigen']['WT_sequence_fa']), checkIfExists: true),
                    [],
                    "HLA-A24:02,HLA-A24:02,HLA-B39:01,HLA-B39:01,HLA-C07:01,HLA-C06:02",
                    "WT"
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.netmhcoutput[0][0],
                    file(process.out.xls[0][1]).name,
                    file(process.out.netmhcoutput[0][1]).name
                    ).match()
                }
            )
        }

    }



    test("netmhc3 - xls,output,fa - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file('MUT_sequence_fa'),
                    file('svfa'),
                    "HLA",
                    "MUT"
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.netmhcoutput[0][0],
                    file(process.out.xls[0][1]).name,
                    file(process.out.netmhcoutput[0][1]).name
                    ).match()
                }
            )
        }

    }

}

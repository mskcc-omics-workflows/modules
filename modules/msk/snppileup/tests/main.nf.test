nextflow_process {

    name "Test SNPPILEUP"
    script "../main.nf"
    process "SNPPILEUP"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "modules_msk"
    tag "snppileup"

    test("snppileup - bam") {

        when {
            process {
                """
                    meta = [ id:'test' ] // meta map
                    input[0] = [
                                    meta,
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_normal_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_normal_bam_bai'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_tumor_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_tumor_bam_bai'], checkIfExists: true),
                                    [],
                                    []
                                ]
                    input[1] = [
                                    meta,
                                    file(params.test_data_mskcc['hg37']['dbsnp_138_b37_chr17_vcf_gz'], checkIfExists: true),
                                    file(params.test_data_mskcc['hg37']['dbsnp_138_b37_chr17_vcf_gz_tbi'], checkIfExists: true)
                               ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("snppileup - bam - extra bam") {

        when {
            process {
                """
                    meta = [ id:'test' ] // meta map
                    input[0] = [
                                    meta,
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_normal_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_normal_bam_bai'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_tumor_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_tumor_bam_bai'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_2_tumor_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_2_tumor_bam_bai'], checkIfExists: true)
                                ]
                    input[1] = [
                                    meta,
                                    file(params.test_data_mskcc['hg37']['dbsnp_138_b37_chr17_vcf_gz'], checkIfExists: true),
                                    file(params.test_data_mskcc['hg37']['dbsnp_138_b37_chr17_vcf_gz_tbi'], checkIfExists: true)
                               ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("snppileup - bam - extra bam list") {

        when {
            process {
                """
                    meta = [ id:'test' ] // meta map
                    input[0] = [
                                    meta,
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_normal_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_normal_bam_bai'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_tumor_bam'], checkIfExists: true),
                                    file(params.test_data_mskcc['bam_files']['test_argos_sample_1_tumor_bam_bai'], checkIfExists: true),
                                    [file(params.test_data_mskcc['bam_files']['test_argos_sample_2_tumor_bam'], checkIfExists: true), file(params.test_data_mskcc['bam_files']['test_argos_sample_2_normal_bam'], checkIfExists: true) ],
                                    [file(params.test_data_mskcc['bam_files']['test_argos_sample_2_tumor_bam_bai'], checkIfExists: true), file(params.test_data_mskcc['bam_files']['test_argos_sample_2_normal_bam_bai'], checkIfExists: true) ]
                                ]
                    input[1] = [
                                    meta,
                                    file(params.test_data_mskcc['hg37']['dbsnp_138_b37_chr17_vcf_gz'], checkIfExists: true),
                                    file(params.test_data_mskcc['hg37']['dbsnp_138_b37_chr17_vcf_gz_tbi'], checkIfExists: true)
                               ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("snppileup - bam - stub") {

        options "-stub"

        when {
            process {
                """
                    meta = [ id:'test' ] // meta map
                    input[0] = [
                                    meta,
                                    file("stub_file"),
                                    file("stub_file1"),
                                    file("stub_file2"),
                                    file("stub_file3"),
                                    [],
                                    []
                                ]
                    input[1] = [
                                    meta,
                                    file("stub_file4"),
                                    file("stub_file5")
                               ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

        test("snppileup - bam with extra bam - stub") {

        options "-stub"

        when {
            process {
                """
                    meta = [ id:'test' ] // meta map
                    input[0] = [
                                    meta,
                                    file("stub_file"),
                                    file("stub_file1"),
                                    file("stub_file2"),
                                    file("stub_file3"),
                                    file("extra_bam_file"),
                                    file("extra_bam_bai_file")
                                ]
                    input[1] = [
                                    meta,
                                    file("stub_file4"),
                                    file("stub_file5")
                               ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("snppileup - bam with extra bam list - stub") {

        options "-stub"

        when {
            process {
                """
                    meta = [ id:'test' ] // meta map
                    input[0] = [
                                    meta,
                                    file("stub_file"),
                                    file("stub_file1"),
                                    file("stub_file2"),
                                    file("stub_file3"),
                                    [file("extra_bam_file"), file("extra_bam_file_1")],
                                    [file("extra_bam_bai_file"), file("extra_bam_bai_file_1")]
                                ]
                    input[1] = [
                                    meta,
                                    file("stub_file4"),
                                    file("stub_file5")
                               ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}

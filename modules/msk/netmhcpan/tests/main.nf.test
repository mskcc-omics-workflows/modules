nextflow_process {

    name "Test Process NETMHCPAN"
    script "../main.nf"
    process "NETMHCPAN"

    tag "modules"
    tag "modules_nfcore"
    tag "netmhcpan"

    test("netmhcpan - xls,output,fa") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(file(params.test_data_mskcc['neoantigen']['temp_test_short_maf']), checkIfExists: true),
                    file(file(params.test_data_mskcc['neoantigen']['winners_hla_txt']), checkIfExists: true)
                    ]
                input[1] = 'MUT'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.fastaSequences,
                    file(process.out.xls[0][1]).name,
                    file(process.out.netmhcpanoutput[0][1]).name
                    ).match()
                }
            )
        }

    }

    test("netmhcpan - xls,output,fa - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file('temp_test_short_maf'),
                    file('winners_hla_txt')
                    ]

                input[1] = 'MUT'

                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.fastaSequences,
                    file(process.out.xls[0][1]).name,
                    file(process.out.netmhcpanoutput[0][1]).name
                    ).match()
                }
            )
        }

    }

}

nextflow_process {

    name "Test Process CALCULATENOISE"
    script "../main.nf"
    process "CALCULATENOISE"

    tag "modules"
    tag "modules_msk"
    tag "calculatenoise"

    test("chr22 - bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data_mskcc['calculate_noise']['test_chr22_bam'], checkIfExists: true),
                    file(params.test_data_mskcc['calculate_noise']['test_chr22_bam_bai'], checkIfExists: true),
                    file(params.test_data_mskcc['calculate_noise']['test_bed'], checkIfExists: true),
                    ]
                input[1] = file(params.test_data_mskcc['calculate_noise']['test_chr22_fa'], checkIfExists: true)
                input[2] = file(params.test_data_mskcc['calculate_noise']['test_chr22_fa_fai'], checkIfExists: true)
                """
            }
        }

        then {
            def size = path(process.out.acgt[0][1]).size()
            def lines = path(process.out.acgt[0][1]).readLines()[0..1]
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.acgt[0][1]).name,
                    size,
                    lines,
                    process.out.versions,
                    file(process.out.acgt[0][1]).name,
                    file(process.out.substitution[0][1]).name,
                    file(process.out.bytlen[0][1]).name,
                    file(process.out.del[0][1]).name,
                    file(process.out.count[0][1]).name,
                    file(process.out.positions[0][1]).name,
                    file(process.out.html[0][1]).name,
                    file(process.out.pileup[0][1]).name
                    ).match()
                }
            )
        }
    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("chr22 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data_mskcc['calculate_noise']['test_chr22_bam'], checkIfExists: true),
                    file(params.test_data_mskcc['calculate_noise']['test_chr22_bam_bai'], checkIfExists: true),
                    file(params.test_data_mskcc['calculate_noise']['test_bed'], checkIfExists: true),
                    ]
                input[1] = file(params.test_data_mskcc['calculate_noise']['test_chr22_fa'], checkIfExists: true)
                input[2] = file(params.test_data_mskcc['calculate_noise']['test_chr22_fa_fai'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
